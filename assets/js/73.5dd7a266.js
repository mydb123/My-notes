(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{329:function(t,s,a){"use strict";a.r(s);var e=a(19),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"git-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),a("p",[t._v("查看所有分支：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n* master\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("当你执行 "),a("code",[t._v("git init")]),t._v(" 的时候，默认情况下 Git 就会创建 master 分支。")])]),t._v(" "),a("p",[t._v("若手动创建分支。执行 "),a("code",[t._v("git branch (branchname)")]),t._v(" 即可。例如：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch testing\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n* master\n  testing\n")])])]),a("p",[t._v("现在有了个新分支 "),a("strong",[t._v("testing")]),t._v("。")]),t._v(" "),a("p",[t._v("执行 "),a("code",[t._v("git checkout")]),t._v(" 命令，切换到"),a("strong",[t._v("testing")]),t._v("分支，删除"),a("strong",[t._v("3.txt")]),t._v("，并提交。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout testing\nSwitched to branch 'testing'\n$ git rm 3.txt\nrm '3.txt'\n$ git commit -m  \"删除3.txt\"\n[testing 49db6c6] 删除3.txt\n 1 file changed, 1 deletion(-)\n delete mode 100644 3.txt\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("如果删除了"),a("strong",[t._v("3.txt")]),t._v("，但没有 "),a("code",[t._v("git commit")]),t._v("，当切换分支到"),a("strong",[t._v("master")]),t._v("再切换到"),a("strong",[t._v("testing")]),t._v("，会发现删除的"),a("strong",[t._v("3.txt")]),t._v("又回来了。这是因为"),a("code",[t._v("git rm")]),t._v("只删除了"),a("strong",[t._v("工作区")]),t._v("的文件，没有删除"),a("strong",[t._v("暂存区")]),t._v("的文件。当再执行"),a("code",[t._v("git checkout")]),t._v("切换分支时，不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。")])]),t._v(" "),a("h2",{attrs:{id:"git-checkout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git checkout -b (branchname)")]),t._v("来创建新分支并立即切换到该分支:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b newtest\nSwitched to a new branch "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'newtest'")]),t._v("\n")])])]),a("p",[t._v("使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。")]),t._v(" "),a("p",[t._v("删除"),a("strong",[t._v("newtest")]),t._v("分支：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D newtest\nDeleted branch newtest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("was 49db6c6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n")])])]),a("h2",{attrs:{id:"git-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),a("p",[t._v("一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge testing\nRemoving "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(".txt\nMerge made by the "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'recursive'")]),t._v(" strategy.\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(".txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" -\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" deletion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n delete mode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(".txt\n")])])]),a("p",[t._v("但是一旦存在冲突，")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge change_site\nAuto-merging "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".txt\nCONFLICT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": Merge conflict "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".txt\nAutomatic merge failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" fix conflicts and "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" commit the result.\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status -s\nUU "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".txt\n")])])]),a("p",[t._v("手动解决冲突。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("master主分支修改11行\nchange_site分支中修改11行\n")])])]),a("p",[t._v("编辑完冲突后，重新提交"),a("code",[t._v("git commit -am '冲突解决'")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"git-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),a("p",[t._v("与 "),a("code",[t._v("git merge")]),t._v(" 不同的是，"),a("code",[t._v("git rebase")]),t._v(" 会将所有的提交形成一条历史直线。\n例如，有两个分支"),a("strong",[t._v("master")]),t._v("和"),a("strong",[t._v("dev")]),t._v("，当在"),a("strong",[t._v("dev")]),t._v("上执行：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\n")])])]),a("p",[a("strong",[t._v("dev")]),t._v("历史树为成为一条直线。\n遇到冲突时解决后，执行：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\n")])])]),a("p",[t._v("会继续应用余下的补丁。然后再切换到"),a("strong",[t._v("master")]),t._v("分支执行"),a("code",[t._v("git merge dev")])]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),a("code",[t._v("git rebase")]),t._v(" 是一个比较危险的操作，它会重写历史，建议只在自己的分支上使用，不要在公共分支上使用它。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("使用规则：\n当本地 master 分支和远端不一致，需要切换到本地 master 分支，并"),a("code",[t._v("git pull")]),t._v("，然后切换到你自己的分支，执行"),a("code",[t._v("git rebase master")]),t._v("，如果有冲突则解决后重新"),a("code",[t._v("git add .")]),t._v("，并执行"),a("code",[t._v("git rebase --continue")]),t._v("，之后就可以申请合并到主分支了。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);